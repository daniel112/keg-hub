#!/bin/bash 

# Finds the root path of the keg-cli
# Works when the Keg-CLI installed in the keg-hub/repos and is symlinked into the /usr/local/bin
keg_resolve_cli_root_path(){
  local RESOLVED_PATH
  local SOURCE="${BASH_SOURCE[0]}"
  # Resolve $SOURCE until the file is no longer a symlink
  while [ -h "$SOURCE" ]; do
    RESOLVED_PATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    # If $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    [[ $SOURCE != /* ]] && SOURCE="$RESOLVED_PATH/$SOURCE"
  done
  RESOLVED_PATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

  echo "$RESOLVED_PATH"
}

# Check if the keg root dir has been set. If not, then set it
if [[ -z "$KEG_CLI_PATH" ]]; then
  # Set the KEG-CLI path based on the keg root directory
  export KEG_CLI_PATH=$(keg_resolve_cli_root_path)
fi

if [[ -z "$KEG_ROOT_DIR" ]]; then
  # Set the KEG ROOT DIR path based on the keg cli directory
  # Works when the Keg-CLI installed in the keg-hub/repos and is symlinked into the /usr/local/bin
  # Will need to work out other ways to find it when
  export KEG_ROOT_DIR="$(dirname "$(dirname "$KEG_CLI_PATH")")"
fi

# Prints message to stderr so we can do returns with echo to stdout
keg_message(){
  echo "[ KEG CLI ] $@" >&2
  return
}

# Navigates to a directory based on the passed in params
keg_cli_move_directory(){
  local CMD_OUTPUT

  # If no arguments, then $KEG_DOCKER_NAME to keg path
  if [[ "$#" == "0" ]]; then
    CMD_OUTPUT="$(node $KEG_CLI_PATH/scripts/cli/getConfigPath.js keg)"
  else
    CMD_OUTPUT="$(node $KEG_CLI_PATH/scripts/cli/getConfigPath.js $@)"
  fi

  # Convert the ouput to an array
  IFS=$'\n'
  local OUTPUT_ARR=($CMD_OUTPUT)
  unset IFS

  # Get the second line containing the path to move to
  local MOVE_TO_PATH="${OUTPUT_ARR[1]}"

  if [[ "$MOVE_TO_PATH" ]]; then
    echo "${OUTPUT_ARR[0]}"
    cd $MOVE_TO_PATH
    echo ""
    return 0
  fi

  return 1
}

# Auto loads the GIT_KEY and docker-machine envs
keg_auto_load_envs(){
  # Check if $KEG_DOCKER_NAME is already loaded
  if [[ -z "$KEG_DOCKER_NAME" ]]; then
    local KEG_DM_ENVS=$KEG_CLI_PATH/scripts/docker/docker-desktop.env
    # Ensure the file exists
    if [[ -f "$KEG_DM_ENVS" ]]; then
      # Load the docker-machine ENVs, but route the output to dev/null
      # This way nothing is printed to the terminal
      set -o allexport
      source $KEG_DM_ENVS >/dev/null 2>&1
      set +o allexport
    fi
  fi

  # Set the keg auto loaded to true, so we don't call the auto load again
  # for any future keg-cli commands
  export KEG_ENV_LOADED="loaded"

  return
}

# Opening to the keg cli
# For navigation commands, calls keg_cli_move_directory
# All other commands call keg-cli node script
keg(){

  # Check if reloading the bash portion of the keg cli
  if [[ "$1" == "reload" || "$1" == "rl" || "$1" == "src" ]] && [[ -z "$2" ]]; then
    # Reload this bash script
    keg_message "Reloading Keg CLI..."
    source $KEG_CLI_PATH/keg
    return

  # export the git key for the current terminal session
  elif [[ "$1" == "home" || "$1" == "hm" ]] && [[ -z "$2" ]]; then
    cd ~/
    return
  elif [[ "$#" == "0" || "$#" == "1" ]]; then
    keg_cli_move_directory $@

    # Get the return code from the move dir command
    local KEG_MOVE_DIR=$?
    if [[ "$KEG_MOVE_DIR" == 0 ]]; then
      return 0
    fi
  fi

  if [[ -z "$KEG_ENV_LOADED" ]]; then
    # Auto load the envs before running the keg-cli cmd
    keg_auto_load_envs
  fi

  # All other commands get passed on to the node keg-cli script
  node $KEG_CLI_PATH/keg-cli $@
}
